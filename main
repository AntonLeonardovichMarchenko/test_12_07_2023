aimport light
import pro
import ultra_pro

"""
Как правило, программы на языке Python состоят не из одного, а из множества текстовых файлов,
содержащих инструкции. При этом один из файлов используется в качестве главного, 
а все остальные дополнительные файлы подключаются к нему посредством импорта. 
Говоря о файлах в таком контексте, как раз и подразумевают модули.
Модуль – это отдельный файл с программным кодом на языке Python, 
который создается один раз и далее может быть использован программами многократно.
Для формирования модуля необходимо создать обычный текстовый файл с расширением *py 
и записать в него целевые программные инструкции. Название файла при этом 
будет представлять имя модуля, а сам модуль после создания станет доступным для 
использования либо в качестве независимого сценария, либо в виде расширения, 
подключаемого к другим модулям, позволяя тем самым связывать отдельные файлы 
в крупные программные системы. 
При этом все имена, которым будет выполнено присваивание на верхнем уровне модуля 
(т.е. внутри файла модуля вне функций, классов и т.д.), становятся атрибутами 
объекта модуля, доступными для использования клиентами в формате mod_name.attr.

Использование модульного подхода в программировании дает важные преимущества, 
т.к. модули:

обеспечивают многократное использование программного кода в различных программах 
за счет сохранения его в файлах с возможностью повторной загрузки и запуска кода 
только раз, сколько потребуется;

разбивают пространство имен программы на отдельные пакеты и при этом все имена 
каждого отдельного модуля становятся видимыми в основном пространстве только 
после импортирования модуля. При этом вероятность конфликта имен сводится к минимуму;

могут использоваться для независимой разработки компонентов, а также реализации служб 
или данных для совместного использования, за счет возможности последующего импортирования
множеством клиентов. Все модули в Python можно разделить на четыре основные категории:

1. встроенные модули (от англ. bilt-in) – представляют собой базовые возможности языка 
и либо импортируются интерпретатором автоматически, либо требуют лишь простого импортирования
без необходимости дополнительной установки;
2. стандартная библиотека (от англ. standard library) – коллекция дополнительных модулей
и пакетов, представляющих расширенные возможности языка, которая входит непосредственно 
в состав дистрибутива Python и также требует лишь простого импортирования ее модулей без 
необходимости дополнительной установки;
3. сторонние модули (от англ. 3rd party) – более 90 000 модулей и пакетов, которые 
не входят в дистрибутив Python, но могут быть установлены из Python Package Index (PyPI) 
официального сайта с помощью утилиты pip;
4.пользовательские модули – все модули программы, которые создаются самими разработчиками.
На данный момент для Python написано огромное количество модулей. Запомнить или хотя бы 
ознакомиться с ними невозможно. 
Однако это и не требуется, поскольку любой модуль используется лишь по необходимости. 
Например, если приходится разрабатывать приложение, в котором используются сложные 
математические вычисления, достаточно найти и подключить соответствующий математический 
модуль со встроенной поддержкой требуемых операций. 
После этого можно пользоваться всеми его возможностями без затрат времени на разработку 
и написание того, что уже было ранее придумано и разработано.
"""

# ===================================================================

def main():

    print('>>>>>>>>>> main <<<<<<<<<<')

    print(f'light')
    light.start('простые тесты')

    print(f'pro')
    pro.start('"чистые и грязные" функции')

    print(f'ultra pro')
    ultra_pro.start('ultra_pro: tasksTester with unittest')
# ===================================================================

if __name__ == '__main__':
    main()

